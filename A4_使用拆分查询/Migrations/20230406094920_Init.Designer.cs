// <auto-generated />
using A4_使用拆分查询;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace A4_使用拆分查询.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230406094920_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("A4_使用拆分查询.Blog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Blogs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "tom's blog"
                        });
                });

            modelBuilder.Entity("A4_使用拆分查询.Contributor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.ToTable("Contributors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BlogId = 1,
                            Name = "Contributor # 1"
                        },
                        new
                        {
                            Id = 2,
                            BlogId = 1,
                            Name = "Contributor # 2"
                        },
                        new
                        {
                            Id = 3,
                            BlogId = 1,
                            Name = "Contributor # 3"
                        },
                        new
                        {
                            Id = 4,
                            BlogId = 1,
                            Name = "Contributor # 4"
                        },
                        new
                        {
                            Id = 5,
                            BlogId = 1,
                            Name = "Contributor # 5"
                        },
                        new
                        {
                            Id = 6,
                            BlogId = 1,
                            Name = "Contributor # 6"
                        },
                        new
                        {
                            Id = 7,
                            BlogId = 1,
                            Name = "Contributor # 7"
                        },
                        new
                        {
                            Id = 8,
                            BlogId = 1,
                            Name = "Contributor # 8"
                        },
                        new
                        {
                            Id = 9,
                            BlogId = 1,
                            Name = "Contributor # 9"
                        },
                        new
                        {
                            Id = 10,
                            BlogId = 1,
                            Name = "Contributor # 10"
                        });
                });

            modelBuilder.Entity("A4_使用拆分查询.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BlogId = 1,
                            Name = "post # 1"
                        },
                        new
                        {
                            Id = 2,
                            BlogId = 1,
                            Name = "post # 2"
                        },
                        new
                        {
                            Id = 3,
                            BlogId = 1,
                            Name = "post # 3"
                        },
                        new
                        {
                            Id = 4,
                            BlogId = 1,
                            Name = "post # 4"
                        },
                        new
                        {
                            Id = 5,
                            BlogId = 1,
                            Name = "post # 5"
                        },
                        new
                        {
                            Id = 6,
                            BlogId = 1,
                            Name = "post # 6"
                        },
                        new
                        {
                            Id = 7,
                            BlogId = 1,
                            Name = "post # 7"
                        },
                        new
                        {
                            Id = 8,
                            BlogId = 1,
                            Name = "post # 8"
                        },
                        new
                        {
                            Id = 9,
                            BlogId = 1,
                            Name = "post # 9"
                        },
                        new
                        {
                            Id = 10,
                            BlogId = 1,
                            Name = "post # 10"
                        });
                });

            modelBuilder.Entity("A4_使用拆分查询.Contributor", b =>
                {
                    b.HasOne("A4_使用拆分查询.Blog", null)
                        .WithMany("Contributors")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("A4_使用拆分查询.Post", b =>
                {
                    b.HasOne("A4_使用拆分查询.Blog", null)
                        .WithMany("Posts")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("A4_使用拆分查询.Blog", b =>
                {
                    b.Navigation("Contributors");

                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
